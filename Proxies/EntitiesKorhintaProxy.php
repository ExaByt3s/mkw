<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesKorhintaProxy extends \Entities\Korhinta implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function convertToArray()
    {
        $this->__load();
        return parent::convertToArray();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getNev()
    {
        $this->__load();
        return parent::getNev();
    }

    public function setNev($nev)
    {
        $this->__load();
        return parent::setNev($nev);
    }

    public function getSzoveg()
    {
        $this->__load();
        return parent::getSzoveg();
    }

    public function setSzoveg($adat)
    {
        $this->__load();
        return parent::setSzoveg($adat);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setUrl($adat)
    {
        $this->__load();
        return parent::setUrl($adat);
    }

    public function getKepurl($pre = '/')
    {
        $this->__load();
        return parent::getKepurl($pre);
    }

    public function getKepurlSmall($pre = '/')
    {
        $this->__load();
        return parent::getKepurlSmall($pre);
    }

    public function getKepurlMedium($pre = '/')
    {
        $this->__load();
        return parent::getKepurlMedium($pre);
    }

    public function getKepurlLarge($pre = '/')
    {
        $this->__load();
        return parent::getKepurlLarge($pre);
    }

    public function setKepurl($kepurl)
    {
        $this->__load();
        return parent::setKepurl($kepurl);
    }

    public function getKepleiras()
    {
        $this->__load();
        return parent::getKepleiras();
    }

    public function setKepleiras($kepleiras)
    {
        $this->__load();
        return parent::setKepleiras($kepleiras);
    }

    public function getKepnev()
    {
        $this->__load();
        return parent::getKepnev();
    }

    public function setKepnev($kepnev)
    {
        $this->__load();
        return parent::setKepnev($kepnev);
    }

    public function getLathato()
    {
        $this->__load();
        return parent::getLathato();
    }

    public function setLathato($adat)
    {
        $this->__load();
        return parent::setLathato($adat);
    }

    public function getSorrend()
    {
        $this->__load();
        return parent::getSorrend();
    }

    public function setSorrend($adat)
    {
        $this->__load();
        return parent::setSorrend($adat);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'nev', 'szoveg', 'url', 'kepurl', 'kepleiras', 'lathato', 'sorrend');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}