<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntitiesDolgozoProxy extends \Entities\Dolgozo implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getNev()
    {
        $this->__load();
        return parent::getNev();
    }

    public function setNev($nev)
    {
        $this->__load();
        return parent::setNev($nev);
    }

    public function getIrszam()
    {
        $this->__load();
        return parent::getIrszam();
    }

    public function setIrszam($irszam)
    {
        $this->__load();
        return parent::setIrszam($irszam);
    }

    public function getVaros()
    {
        $this->__load();
        return parent::getVaros();
    }

    public function setVaros($varos)
    {
        $this->__load();
        return parent::setVaros($varos);
    }

    public function getUtca()
    {
        $this->__load();
        return parent::getUtca();
    }

    public function setUtca($utca)
    {
        $this->__load();
        return parent::setUtca($utca);
    }

    public function getTelefon()
    {
        $this->__load();
        return parent::getTelefon();
    }

    public function setTelefon($telefon)
    {
        $this->__load();
        return parent::setTelefon($telefon);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getSzulido()
    {
        $this->__load();
        return parent::getSzulido();
    }

    public function getSzulidoStr()
    {
        $this->__load();
        return parent::getSzulidoStr();
    }

    public function setSzulido($adat)
    {
        $this->__load();
        return parent::setSzulido($adat);
    }

    public function getSzulhely()
    {
        $this->__load();
        return parent::getSzulhely();
    }

    public function setSzulhely($adat)
    {
        $this->__load();
        return parent::setSzulhely($adat);
    }

    public function getEvesmaxszabi()
    {
        $this->__load();
        return parent::getEvesmaxszabi();
    }

    public function setEvesmaxszabi($eves)
    {
        $this->__load();
        return parent::setEvesmaxszabi($eves);
    }

    public function getMunkaviszonykezdete()
    {
        $this->__load();
        return parent::getMunkaviszonykezdete();
    }

    public function getMunkaviszonykezdeteStr()
    {
        $this->__load();
        return parent::getMunkaviszonykezdeteStr();
    }

    public function setMunkaviszonykezdete($adat)
    {
        $this->__load();
        return parent::setMunkaviszonykezdete($adat);
    }

    public function getMunkakor()
    {
        $this->__load();
        return parent::getMunkakor();
    }

    public function getMunkakorNev()
    {
        $this->__load();
        return parent::getMunkakorNev();
    }

    public function getMunkakorId()
    {
        $this->__load();
        return parent::getMunkakorId();
    }

    public function setMunkakor(\Entities\Munkakor $munkakor)
    {
        $this->__load();
        return parent::setMunkakor($munkakor);
    }

    public function removeMunkakor()
    {
        $this->__load();
        return parent::removeMunkakor();
    }

    public function getMuvelet()
    {
        $this->__load();
        return parent::getMuvelet();
    }

    public function getMuveletNev()
    {
        $this->__load();
        return parent::getMuveletNev();
    }

    public function getMuveletId()
    {
        $this->__load();
        return parent::getMuveletId();
    }

    public function setMuvelet(\Entities\Termek $muvelet)
    {
        $this->__load();
        return parent::setMuvelet($muvelet);
    }

    public function removeMuvelet()
    {
        $this->__load();
        return parent::removeMuvelet();
    }

    public function getJelenletek()
    {
        $this->__load();
        return parent::getJelenletek();
    }

    public function addJelenlet(\Entities\Jelenletiiv $adat)
    {
        $this->__load();
        return parent::addJelenlet($adat);
    }

    public function removeJelenlet(\Entities\Jelenletiiv $adat)
    {
        $this->__load();
        return parent::removeJelenlet($adat);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'nev', 'irszam', 'varos', 'utca', 'telefon', 'email', 'munkakor', 'muvelet', 'szulido', 'szulhely', 'evesmaxszabi', 'munkaviszonykezdete', 'jelenletek');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}